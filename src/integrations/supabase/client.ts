// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL as string;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY as string;

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

const isConfigured = Boolean(SUPABASE_URL && SUPABASE_PUBLISHABLE_KEY);

const NOT_CONFIGURED_ERROR = new Error('Supabase is not configured. Set VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY in your environment.');

function createDummyClient() {
  const throwErr = async () => { throw NOT_CONFIGURED_ERROR };
  const chainable = () => ({
    select: throwErr,
    insert: throwErr,
    upsert: throwErr,
    update: throwErr,
    delete: throwErr,
    order: () => chainable(),
    eq: () => chainable(),
    ilike: () => chainable(),
    single: throwErr,
    selectAll: throwErr,
    from: () => chainable()
  });

  return {
    auth: {
      signInWithOtp: throwErr,
      verifyOtp: throwErr,
      signOut: throwErr,
      signInWithPassword: throwErr,
      signUp: throwErr,
      getSession: async () => ({ data: { session: null }, error: NOT_CONFIGURED_ERROR }),
      getUser: async () => ({ data: { user: null }, error: NOT_CONFIGURED_ERROR })
    },
    from: (_: string) => chainable(),
    storage: {
      from: (_: string) => ({
        upload: throwErr,
        createSignedUrl: throwErr
      })
    }
  } as unknown as ReturnType<typeof createClient>;
}

export const supabase = isConfigured
  ? createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
      auth: {
        storage: localStorage,
        persistSession: true,
        autoRefreshToken: true,
      }
    })
  : createDummyClient();
